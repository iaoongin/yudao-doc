(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{374:function(a,t,s){"use strict";s.r(t);var n=s(7),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("yudao-spring-boot-starter-mybatis")]),t("OutboundLink")],1),a._v(" 技术组件，除了提供 MyBatis 数据库操作，还提供了如下 2 种功能：")]),a._v(" "),t("ul",[t("li",[a._v("数据连接池：基于 "),t("a",{attrs:{href:"https://github.com/alibaba/druid",target:"_blank",rel:"noopener noreferrer"}},[a._v("Alibaba Druid"),t("OutboundLink")],1),a._v(" 实现，额外提供监控的能力。")]),a._v(" "),t("li",[a._v("多数据源（读写分离）：基于 "),t("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[a._v("Dynamic Datasource"),t("OutboundLink")],1),a._v(" 实现，支持 Druid 连接池，可集成 "),t("a",{attrs:{href:"https://www.iocoder.cn/Seata/install/?yudao",target:"_blank",rel:"noopener noreferrer"}},[a._v("Seata"),t("OutboundLink")],1),a._v(" 实现分布式事务。")])]),a._v(" "),t("h2",{attrs:{id:"_1-数据连接池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据连接池"}},[a._v("#")]),a._v(" 1. 数据连接池")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("友情提示：")]),a._v(" "),t("p",[a._v("如果你未学习过 Druid 数据库连接池，可以后续阅读 "),t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/datasource-pool/?yudao",target:"_blank",rel:"noopener noreferrer"}},[a._v("《芋道 Spring Boot 数据库连接池入门》"),t("OutboundLink")],1),a._v(" 文章。")])]),a._v(" "),t("div",{staticClass:"language-XML extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com.alibaba"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("druid-spring-boot-starter"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("h3",{attrs:{id:"_1-1-druid-监控配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-druid-监控配置"}},[a._v("#")]),a._v(" 1.1 Druid 监控配置")]),a._v(" "),t("p",[a._v("在 "),t("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-local.yaml",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("application-local.yaml")]),t("OutboundLink")],1),a._v(" 配置文件中，通过 "),t("code",[a._v("spring.datasource.druid")]),a._v(" 配置项，仅仅设置了 Druid "),t("strong",[a._v("监控")]),a._v("相关的配置项目，具体数据库的设置需要使用 Dynamic Datasource 的配置项。如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/01.png",alt:" 配置项"}})]),a._v(" "),t("h3",{attrs:{id:"_1-2-druid-监控界面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-druid-监控界面"}},[a._v("#")]),a._v(" 1.2 Druid 监控界面")]),a._v(" "),t("p",[a._v("① 访问后端的 "),t("code",[a._v("/druid/index.html")]),a._v(" 路径，例如说本地的 "),t("code",[a._v("http://127.0.0.1:48080/druid/index.html")]),a._v(" 地址，可以查看到 Druid 监控界面。如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/02.png",alt:"Druid 监控界面"}})]),a._v(" "),t("p",[a._v("② 访问前端的 [基础设施 -> MySQL 监控] 菜单，也可以查看到 Druid 监控界面。如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/03.png",alt:"Druid 监控界面"}})]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("补充说明：")]),a._v(" "),t("p",[a._v("前端 [基础设施 -> MySQL 监控] 菜单，通过 iframe 内嵌后端的 "),t("code",[a._v("/druid/index.html")]),a._v(" 路径。")]),a._v(" "),t("p",[a._v("如果你想自定义地址，可以前往 [基础设置 -> 配置管理] 菜单，设置 key 为 "),t("code",[a._v("url.druid")]),a._v(" 配置项。")])]),a._v(" "),t("h3",{attrs:{id:"_1-3-如何开启登录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-如何开启登录"}},[a._v("#")]),a._v(" 1.3 如何开启登录？")]),a._v(" "),t("p",[a._v("生产环境下，建议 Druid 监控界面开启“安全认证”的功能，避免出现安全事故。")]),a._v(" "),t("p",[a._v("只需要在 "),t("code",[a._v("spring.datasource.druid.stat-view-servlet")]),a._v(" 配置项中，设置 "),t("code",[a._v("login-username")]),a._v(" 和 "),t("code",[a._v("login-password")]),a._v(" 即可。开启后，登录界面如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/druid-security.png",alt:"Druid 登录界面"}})]),a._v(" "),t("h2",{attrs:{id:"_2-多数据源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-多数据源"}},[a._v("#")]),a._v(" 2. 多数据源")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("友情提示：")]),a._v(" "),t("p",[a._v("如果你未学习过多数据源，可以后续阅读 "),t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/dynamic-datasource/?yudao",target:"_blank",rel:"noopener noreferrer"}},[a._v("《芋道 Spring Boot 多数据源（读写分离）入门》"),t("OutboundLink")],1),a._v(" 文章。")])]),a._v(" "),t("div",{staticClass:"language-XML extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com.baomidou"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("dynamic-datasource-spring-boot-starter"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),t("h3",{attrs:{id:"_2-1-多数据源配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-多数据源配置"}},[a._v("#")]),a._v(" 2.1 多数据源配置")]),a._v(" "),t("p",[a._v("在 "),t("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-local.yaml#L30-L58",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("application-local.yaml")]),t("OutboundLink")],1),a._v(" 配置文件中，通过 "),t("code",[a._v("spring.datasource.dynamic")]),a._v(" 配置项，配置了 Master-Slave 主从两个数据源。如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/04.png",alt:" 配置项"}})]),a._v(" "),t("h3",{attrs:{id:"_2-2-数据源切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-数据源切换"}},[a._v("#")]),a._v(" 2.2 数据源切换")]),a._v(" "),t("h4",{attrs:{id:"_2-2-1-master-注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-master-注解"}},[a._v("#")]),a._v(" 2.2.1 @Master 注解")]),a._v(" "),t("p",[a._v("在方法上添加 "),t("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/Master.java",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("@Master")]),t("OutboundLink")],1),a._v(" 注解，使用名字为 "),t("code",[a._v("master")]),a._v(" 的数据源，即使用【主】库，一般适合【写】场景。示例如下图：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/05.png",alt:"@Master 注解"}})]),a._v(" "),t("p",[a._v("由于项目的 "),t("code",[a._v("spring.datasource.dynamic.primary")]),a._v(" 为 "),t("code",[a._v("master")]),a._v("，默认使用【主】库，所以无需手动添加 "),t("code",[a._v("@Master")]),a._v(" 注解。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-2-slave-注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-slave-注解"}},[a._v("#")]),a._v(" 2.2.2 @Slave 注解")]),a._v(" "),t("p",[a._v("在方法上添加 "),t("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/Slave.java",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("@Slave")]),t("OutboundLink")],1),a._v(" 注解，使用名字为 "),t("code",[a._v("slave")]),a._v(" 的数据源，即使用【从】库，一般适合【读】场景。示例如下图：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/06.png",alt:"@Slave 注解"}})]),a._v(" "),t("h4",{attrs:{id:"_2-2-3-ds-注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-ds-注解"}},[a._v("#")]),a._v(" 2.2.3 @DS 注解")]),a._v(" "),t("p",[a._v("在方法上添加 "),t("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/DS.java",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("@DS")]),t("OutboundLink")],1),a._v(" 注解，使用指定名字的数据源，适合多数据源的情况。示例如下图：")]),a._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/07.png",alt:"@DS 注解"}})]),a._v(" "),t("h2",{attrs:{id:"_3-事务相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-事务相关"}},[a._v("#")]),a._v(" 3. 事务相关")]),a._v(" "),t("p",[a._v("事务一共有 3 种解决方案，分别是：")]),a._v(" "),t("ul",[t("li",[a._v("单机 + 单数据源："),t("code",[a._v("@Transactional")]),a._v(" 注解")]),a._v(" "),t("li",[a._v("单机 + 多数据源："),t("code",[a._v("@DSTransactional")]),a._v(" 注解")]),a._v(" "),t("li",[a._v("多机 + 单/多数据源：Seata 分布式事务")])]),a._v(" "),t("h3",{attrs:{id:"_3-1-transactional-注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-transactional-注解"}},[a._v("#")]),a._v(" 3.1 @Transactional 注解")]),a._v(" "),t("p",[a._v("大多数情况下，是单机 + 单个数据源的操作，只需要在方法上添加 Spring "),t("code",[a._v("@Transactional")]),a._v(" 注解，声明事务即可。")]),a._v(" "),t("p",[a._v("具体的使用，可以项目里搜 "),t("code",[a._v("@Transactional")]),a._v(" 关键字，就可以看到非常多的使用示例。")]),a._v(" "),t("h3",{attrs:{id:"_3-2-dstransactional-注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-dstransactional-注解"}},[a._v("#")]),a._v(" 3.2 @DSTransactional 注解")]),a._v(" "),t("p",[a._v("如果单机 + 多个数据源的操作，使用 "),t("code",[a._v("@Transactional")]),a._v(" 声明的事务中，无法进行数据源的切换。此时，可以使用 Dynamic Datasource 提供的 "),t("a",{attrs:{href:"https://github.com/baomidou/dynamic-datasource-spring-boot-starter/blob/master/src/main/java/com/baomidou/dynamic/datasource/annotation/DSTransactional.java",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("@DSTransactional")]),t("OutboundLink")],1),a._v(" 注解，支持多数据源的切换。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("友情提示：")]),a._v(" "),t("p",[t("code",[a._v("@DSTransactional")]),a._v(" 注解，提供相对可靠的多数据源的事务一致性，但是不绝对，可学习 "),t("a",{attrs:{href:"https://www.yinxiang.com/everhub/note/ac0175c8-35f5-4d66-8cd3-c662d7a16441",target:"_blank",rel:"noopener noreferrer"}},[a._v("《DSTransactional 实现源码分析 》"),t("OutboundLink")],1),a._v(" 文章。")])]),a._v(" "),t("p",[a._v("使用的示例，AService 调用 BService、CService，并且分别对应 a、b、c 各自的数据源，代码如下所示：")]),a._v(" "),t("div",{staticClass:"language-Java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AService")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Resource")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BService")]),a._v(" bService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Resource")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CService")]),a._v(" cService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@DS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 注意：如果 a 是默认数据源时，则不需要 @DS 注解")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@DSTransactional")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        bService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createB")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BService")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        \n        "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@DS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createB")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 调用 bMapper 逻辑")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CService")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        \n        "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@DS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 调用 cMapper 逻辑")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("场景问题：")]),a._v(" "),t("p",[a._v("问题 ①：c 数据源的操作发生异常，a、b 数据源会回滚么？")]),a._v(" "),t("ul",[t("li",[a._v("答案：会的，因为最终是最外层的 "),t("code",[a._v("@DSTransactional")]),a._v(" 注解对应的方法结束后，才进行事务的提交，所以它实际不需要回滚。")]),a._v(" "),t("li",[a._v("注意：但是有一点要注意，如果提交时某个数据源的事务提交失败，则可能导致事务的不一致。")])]),a._v(" "),t("p",[a._v("问题 ②：b、c 数据源的方法，也添加 "),t("code",[a._v("@DSTransactional")]),a._v(" 注解，会不会影响事务？")]),a._v(" "),t("ul",[t("li",[a._v("答案：不会，可以放心大胆的加。")])])]),a._v(" "),t("h3",{attrs:{id:"_3-3-分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-分布式事务"}},[a._v("#")]),a._v(" 3.3 分布式事务")]),a._v(" "),t("p",[a._v("在多机分布式场景下，无论是单数据源、多数据源，本质上都是分布式事务，建议引入 Seata 框架，提供完整的分布式事务的解决方案，可学习 "),t("a",{attrs:{href:"https://www.iocoder.cn/Seata/install/?yudao",target:"_blank",rel:"noopener noreferrer"}},[a._v("《芋道 Seata 极简入门 》"),t("OutboundLink")],1),a._v(" 文章。")]),a._v(" "),t("p",[a._v("不过如果你是单机项目，则可以不用关注着一点哈！")]),a._v(" "),t("h2",{attrs:{id:"_4-分库分表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-分库分表"}},[a._v("#")]),a._v(" 4. 分库分表")]),a._v(" "),t("p",[a._v("建议采用 ShardingSphere 的子项目 Sharding-JDBC 完成分库分表的功能，可阅读 "),t("a",{attrs:{href:"https://www.iocoder.cn/Spring-Boot/sharding-datasource/?yudao",target:"_blank",rel:"noopener noreferrer"}},[a._v("《芋道 Spring Boot 分库分表入门 》"),t("OutboundLink")],1),a._v(" 文章，学习如何整合进项目。")])])}),[],!1,null,null,null);t.default=r.exports}}]);