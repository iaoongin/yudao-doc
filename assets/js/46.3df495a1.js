(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{375:function(t,a,s){"use strict";s.r(a);var e=s(7),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-redis/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("yudao-spring-boot-starter-redis")]),a("OutboundLink")],1),t._v(" 技术组件，使用 Redis 实现缓存的功能，它有 2 种使用方式：")]),t._v(" "),a("ul",[a("li",[t._v("编程式缓存：基于 Spring Data Redis 框架的 RedisTemplate 操作模板")]),t._v(" "),a("li",[t._v("声明式缓存：基于 Spring Cache 框架的 "),a("code",[t._v("@Cacheable")]),t._v(" 等等注解")])]),t._v(" "),a("h2",{attrs:{id:"_1-编程式缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-编程式缓存"}},[t._v("#")]),t._v(" 1. 编程式缓存")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("友情提示：")]),t._v(" "),a("p",[t._v("如果你未学习过 Spring Data Redis 框架，可以后续阅读 "),a("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/Redis/?yudao",target:"_blank",rel:"noopener noreferrer"}},[t._v("《芋道 Spring Boot Redis 入门》"),a("OutboundLink")],1),t._v(" 文章。")])]),t._v(" "),a("div",{staticClass:"language-XML extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.redisson"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("redisson-spring-boot-starter"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("由于 Redisson 提供了分布式锁、队列、限流等特性，所以使用它作为 Spring Data Redis 的客户端。")]),t._v(" "),a("h3",{attrs:{id:"_1-1-spring-data-redis-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-spring-data-redis-配置"}},[t._v("#")]),t._v(" 1.1 Spring Data Redis 配置")]),t._v(" "),a("p",[t._v("① 在 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application-local.yaml#L60-L64",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("application-local.yaml")]),a("OutboundLink")],1),t._v(" 配置文件中，通过 "),a("code",[t._v("spring.redis")]),t._v(" 配置项，设置 Redis 的配置。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/01.png",alt:"Spring Data Redis 配置"}})]),t._v(" "),a("p",[t._v("② 在 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-redis/src/main/java/cn/iocoder/yudao/framework/redis/config/YudaoRedisAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("YudaoRedisAutoConfiguration"),a("OutboundLink")],1),t._v(" 配置类，设置使用 JSON 序列化 value 值。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/02.png",alt:"YudaoRedisAutoConfiguration 配置类"}})]),t._v(" "),a("h3",{attrs:{id:"_1-2-实战案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-实战案例"}},[t._v("#")]),t._v(" 1.2 实战案例")]),t._v(" "),a("p",[t._v("以访问令牌 Access Token 的缓存来举例子，讲解项目中是如何使用 Spring Data Redis 框架的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/07.png",alt:"Access Token 示例"}})]),t._v(" "),a("h4",{attrs:{id:"_1-2-1-引入依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-引入依赖"}},[t._v("#")]),t._v(" 1.2.1 引入依赖")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("yudao-module-system-biz")]),t._v(" 模块中，引入 "),a("code",[t._v("yudao-spring-boot-starter-redis")]),t._v(" 技术组件。如下所示：")]),t._v(" "),a("div",{staticClass:"language-XML extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("cn.iocoder.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("yudao-spring-boot-starter-redis"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h4",{attrs:{id:"_1-2-2-oauth2accesstokendo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-oauth2accesstokendo"}},[t._v("#")]),t._v(" 1.2.2 OAuth2AccessTokenDO")]),t._v(" "),a("p",[t._v("新建 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/dataobject/oauth2/OAuth2AccessTokenDO.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth2AccessTokenDO"),a("OutboundLink")],1),t._v(" 类，访问令牌 Access Token 类。代码如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/03.png",alt:"OAuth2AccessTokenDO 类"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("友情提示：")]),t._v(" "),a("ul",[a("li",[t._v("① 如果值是【简单】的 String 或者 Integer 等类型，无需创建数据实体。")]),t._v(" "),a("li",[t._v("② 如果值是【复杂对象】时，建议在 "),a("code",[t._v("dal/dataobject")]),t._v(" 包下，创建对应的数据实体。")])])]),t._v(" "),a("h4",{attrs:{id:"_1-2-3-rediskeyconstants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-rediskeyconstants"}},[t._v("#")]),t._v(" 1.2.3 RedisKeyConstants")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("为什么要定义 Redis Key 常量？")]),t._v(" "),a("p",[t._v("每个 "),a("code",[t._v("yudao-module-xxx")]),t._v(" 模块，都有一个 RedisKeyConstants 类，定义该模块的 Redis Key 的信息。目的是，避免 Redis Key 散落在 Service 业务代码中，像对待数据库的表一样，对待每个 Redis Key。通过这样的方式，如果我们想要了解一个模块的 Redis 的使用情况，只需要查看 RedisKeyConstants 类即可。")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("yudao-module-system")]),t._v(" 模块的 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/redis/RedisKeyConstants.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("RedisKeyConstants"),a("OutboundLink")],1),t._v(" 类中，新建 OAuth2AccessTokenDO 对应的 Redis Key 定义 "),a("code",[t._v("OAUTH2_ACCESS_TOKEN")]),t._v("。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/04.png",alt:"RedisKeyConstants 类"}})]),t._v(" "),a("h4",{attrs:{id:"_1-2-4-oauth2accesstokenredisdao"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-oauth2accesstokenredisdao"}},[t._v("#")]),t._v(" 1.2.4 OAuth2AccessTokenRedisDAO")]),t._v(" "),a("p",[t._v("新建 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/dal/redis/oauth2/OAuth2AccessTokenRedisDAO.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth2AccessTokenRedisDAO"),a("OutboundLink")],1),t._v(" 类，是 OAuth2AccessTokenDO 的 RedisDAO 实现。代码如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/05.png",alt:"OAuth2AccessTokenRedisDAO 类"}})]),t._v(" "),a("h4",{attrs:{id:"_1-2-5-oauth2tokenserviceimpl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-oauth2tokenserviceimpl"}},[t._v("#")]),t._v(" 1.2.5 OAuth2TokenServiceImpl")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/oauth2/OAuth2TokenServiceImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth2TokenServiceImpl"),a("OutboundLink")],1),t._v(" 中，只要注入 OAuth2AccessTokenRedisDAO Bean，非常简洁干净的进行 OAuth2AccessTokenDO 的缓存操作，无需关心具体的实现。代码如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/06.png",alt:"OAuth2TokenServiceImpl 类"}})]),t._v(" "),a("h2",{attrs:{id:"_2-声明式缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-声明式缓存"}},[t._v("#")]),t._v(" 2. 声明式缓存")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("友情提示：")]),t._v(" "),a("p",[t._v("如果你未学习过 Spring Cache 框架，可以后续阅读 "),a("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/Cache/?yudao",target:"_blank",rel:"noopener noreferrer"}},[t._v("《芋道 Spring Boot Cache 入门》"),a("OutboundLink")],1),t._v(" 文章。")])]),t._v(" "),a("div",{staticClass:"language-XML extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-cache"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("相比来说 Spring Data Redis 编程式缓存，Spring Cache 声明式缓存的使用更加便利，一个 "),a("code",[t._v("@Cacheable")]),t._v(" 注解即可实现缓存的功能。示例如下：")]),t._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Cacheable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-1-spring-cache-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-spring-cache-配置"}},[t._v("#")]),t._v(" 2.1 Spring Cache 配置")]),t._v(" "),a("p",[t._v("① 在 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-server/src/main/resources/application.yaml#L60-L64",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("application.yaml")]),a("OutboundLink")],1),t._v(" 配置文件中，通过 "),a("code",[t._v("spring.redis")]),t._v(" 配置项，设置 Redis 的配置。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/10.png",alt:"Spring Cache 配置"}})]),t._v(" "),a("p",[t._v("② 在 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-redis/src/main/java/cn/iocoder/yudao/framework/redis/config/YudaoCacheAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("YudaoCacheAutoConfiguration"),a("OutboundLink")],1),t._v(" 配置类，设置使用 JSON 序列化 value 值。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/11.png",alt:"YudaoCacheAutoConfiguration 配置类"}})]),t._v(" "),a("h3",{attrs:{id:"_2-2-常见注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-常见注解"}},[t._v("#")]),t._v(" 2.2 常见注解")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-cacheable-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-cacheable-注解"}},[t._v("#")]),t._v(" 2.2.1 @Cacheable 注解")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/annotation/Cacheable.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@Cacheable")]),a("OutboundLink")],1),t._v(" 注解：添加在方法上，缓存方法的执行结果。执行过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("1）首先，判断方法执行结果的缓存。如果有，则直接返回该缓存结果。")]),t._v(" "),a("li",[t._v("2）然后，执行方法，获得方法结果。")]),t._v(" "),a("li",[t._v("3）之后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。")]),t._v(" "),a("li",[t._v("4）最后，返回方法结果。")])]),t._v(" "),a("h4",{attrs:{id:"_2-2-2-cacheput-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-cacheput-注解"}},[t._v("#")]),t._v(" 2.2.2 @CachePut 注解")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@CachePut")]),a("OutboundLink")],1),t._v(" 注解，添加在方法上，缓存方法的执行结果。不同于 "),a("code",[t._v("@Cacheable")]),t._v(" 注解，它的执行过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("1）首先，执行方法，获得方法结果。也就是说，无论是否有缓存，都会执行方法。")]),t._v(" "),a("li",[t._v("2）然后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。")]),t._v(" "),a("li",[t._v("3）最后，返回方法结果。")])]),t._v(" "),a("h4",{attrs:{id:"_2-2-3-cacheevict-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-cacheevict-注解"}},[t._v("#")]),t._v(" 2.2.3 @CacheEvict 注解")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@CacheEvict")]),a("OutboundLink")],1),t._v(" 注解，添加在方法上，删除缓存。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-实战案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-实战案例"}},[t._v("#")]),t._v(" 2.3 实战案例")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/permission/RoleServiceImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("RoleServiceImpl"),a("OutboundLink")],1),t._v(" 中，使用 Spring Cache 实现了 Role 角色缓存，采用【被动读】的方案。原因是：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/12.png",alt:"RoleServiceImpl"}})]),t._v(" "),a("ul",[a("li",[t._v("【被动读】相对能够保证 Redis 与 MySQL 的一致性")]),t._v(" "),a("li",[t._v("绝大数数据不需要放到 Redis 缓存中，采用【主动写】会将非必要的数据进行缓存")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("友情提示：")]),t._v(" "),a("p",[t._v("如果你未学习过 MySQL 与 Redis 一致性的问题，可以后续阅读 "),a("a",{attrs:{href:"https://www.iocoder.cn/Fight/How-Redis-and-MySQL-double-write-consistency-guarantee/?yudao",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Redis 与 MySQL 双写一致性如何保证？ 》"),a("OutboundLink")],1),t._v(" 文章。")])]),t._v(" "),a("p",[t._v("① 执行 "),a("code",[t._v("#getRoleFromCache(...)")]),t._v(" 方法，从 MySQL 读取数据后，向 Redis 写入缓存。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/13.png",alt:"getTestDemo 方法"}})]),t._v(" "),a("p",[t._v("② 执行 "),a("code",[t._v("#updateRole(...)")]),t._v(" 或 "),a("code",[t._v("#deleteRole(...)")]),t._v(" 方法，在更新或者删除 MySQL 数据后，从 Redis 删除缓存。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/14.png",alt:"getTestDemo 方法"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("补充说明：")]),t._v(" "),a("p",[t._v("如果你在多个项目里，使用了 Redis 想通 db 的话，可以通过 "),a("code",[t._v("spring.cache.redis.key-prefix")]),t._v(" 解决，可见 "),a("a",{attrs:{href:"https://gitee.com/zhijiantianya/ruoyi-vue-pro/pulls/998/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitee.com/zhijiantianya/ruoyi-vue-pro/pulls/998/"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"_2-4-过期时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-过期时间"}},[t._v("#")]),t._v(" 2.4 过期时间")]),t._v(" "),a("p",[t._v("Spring Cache 默认使用 "),a("code",[t._v("spring.cache.redis.time-to-live")]),t._v(" 配置项，设置缓存的过期时间，项目默认为 1 小时。")]),t._v(" "),a("p",[t._v("如果你想自定义过期时间，可以在 "),a("code",[t._v("@Cacheable")]),t._v(" 注解中的 "),a("code",[t._v("cacheNames")]),t._v(" 属性中，添加 "),a("code",[t._v("#{过期时间}")]),t._v(" 后缀，单位是秒。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4.png",alt:"过期时间"}})]),t._v(" "),a("p",[t._v("实现的原来，参考 "),a("a",{attrs:{href:"https://juejin.cn/post/7102222578026020871",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Spring @Cacheable 扩展支持自定义过期时间 》"),a("OutboundLink")],1),t._v(" 文章。")]),t._v(" "),a("h2",{attrs:{id:"_3-redis-监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis-监控"}},[t._v("#")]),t._v(" 3. Redis 监控")]),t._v(" "),a("p",[a("code",[t._v("yudao-module-infra")]),t._v(" 的 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-infra/yudao-module-infra-biz/src/main/java/cn/iocoder/yudao/module/infra/controller/admin/redis/RedisController.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("redis")]),a("OutboundLink")],1),t._v(" 模块，提供了 Redis 监控的功能。")]),t._v(" "),a("p",[t._v("点击 [基础设施 -> 监控中心 -> Redis 监控] 菜单，可以查看到 Redis 的基础信息、命令统计、内存信息。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Redis%E7%BC%93%E5%AD%98/21.png",alt:"Redis 监控"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);