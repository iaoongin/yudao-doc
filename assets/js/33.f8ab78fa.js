(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{362:function(t,a,e){"use strict";e.r(a);var r=e(7),s=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本章节，将介绍多租户的基础知识、以及怎样使用多租户的功能。")]),t._v(" "),a("p",[t._v("相关的视频教程：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://t.zsxq.com/06ufyFAeM",target:"_blank",rel:"noopener noreferrer"}},[t._v("01、如何实现多租户的 DB 封装？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://t.zsxq.com/067eQfAQN",target:"_blank",rel:"noopener noreferrer"}},[t._v("02、如何实现多租户的 Redis 封装？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://t.zsxq.com/06Nnm6QBE",target:"_blank",rel:"noopener noreferrer"}},[t._v("03、如何实现多租户的 Web 与 Security 封装？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://t.zsxq.com/06AYJUR3V",target:"_blank",rel:"noopener noreferrer"}},[t._v("04、如何实现多租户的 Job 封装？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://t.zsxq.com/06aq3nuNF",target:"_blank",rel:"noopener noreferrer"}},[t._v("05、如何实现多租户的 MQ 与 Async 封装？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://t.zsxq.com/06vFQVJIe",target:"_blank",rel:"noopener noreferrer"}},[t._v("06、如何实现多租户的 AOP 与 Util 封装？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://t.zsxq.com/063bqRrNZ",target:"_blank",rel:"noopener noreferrer"}},[t._v("07、如何实现多租户的管理？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://t.zsxq.com/06rBI66yV",target:"_blank",rel:"noopener noreferrer"}},[t._v("08、如何实现多租户的套餐？"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_1-多租户是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-多租户是什么"}},[t._v("#")]),t._v(" 1. 多租户是什么？")]),t._v(" "),a("p",[t._v("多租户，简单来说是指"),a("strong",[t._v("一个")]),t._v("业务系统，可以为"),a("strong",[t._v("多个")]),t._v("组织服务，并且组织之间的数据是"),a("strong",[t._v("隔离")]),t._v("的。")]),t._v(" "),a("p",[t._v("例如说，在服务上部署了一个 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("ruoyi-vue-pro")]),a("OutboundLink")],1),t._v(" 系统，可以支持多个不同的公司使用。这里的"),a("strong",[t._v("一个公司就是一个租户")]),t._v("，每个用户必然属于某个租户。因此，用户也只能看见自己租户下面的内容，其它租户的内容对他是不可见的。")]),t._v(" "),a("h2",{attrs:{id:"_2-数据隔离方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据隔离方案"}},[t._v("#")]),t._v(" 2. 数据隔离方案")]),t._v(" "),a("p",[t._v("多租户的数据隔离方案，可以分成分成三种：")]),t._v(" "),a("ol",[a("li",[t._v("DATASOURCE 模式：独立数据库")]),t._v(" "),a("li",[t._v("SCHEMA 模式：共享数据库，独立 Schema")]),t._v(" "),a("li",[t._v("COLUMN 模式：共享数据库，共享 Schema，共享数据表")])]),t._v(" "),a("h3",{attrs:{id:"_2-1-datasource-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-datasource-模式"}},[t._v("#")]),t._v(" 2.1 DATASOURCE 模式")]),t._v(" "),a("p",[t._v("一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本也高。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/DATASOURCE%E6%A8%A1%E5%BC%8F.png",alt:"DATASOURCE 模式"}})]),t._v(" "),a("ul",[a("li",[t._v("优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。")]),t._v(" "),a("li",[t._v("缺点：增大了数据库的安装数量，随之带来维护成本和购置成本的增加。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-schema-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-schema-模式"}},[t._v("#")]),t._v(" 2.2 SCHEMA 模式")]),t._v(" "),a("p",[t._v("多个或所有租户共享数据库，但一个租户一个表。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/SCHEMA%E6%A8%A1%E5%BC%8F.png",alt:"SCHEMA 模式"}})]),t._v(" "),a("ul",[a("li",[t._v("优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可以支持更多的租户数量。")]),t._v(" "),a("li",[t._v("缺点：如果出现故障，数据恢复比较困难，因为恢复数据库将牵扯到其他租户的数据； 如果需要跨租户统计数据，存在一定困难。")])]),t._v(" "),a("h3",{attrs:{id:"_2-3-column-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-column-模式"}},[t._v("#")]),t._v(" 2.3 COLUMN 模式")]),t._v(" "),a("p",[t._v("共享数据库，共享数据架构。租户共享同一个数据库、同一个表，但在表中通过 "),a("code",[t._v("tenant_id")]),t._v(" 字段区分租户的数据。这是共享程度最高、隔离级别最低的模式。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/COLUMN%E6%A8%A1%E5%BC%8F.png",alt:"COLUMN 模式"}})]),t._v(" "),a("ul",[a("li",[t._v("优点：维护和购置成本最低，允许每个数据库支持的租户数量最多。")]),t._v(" "),a("li",[t._v("缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量；数据备份和恢复最困难，需要逐表逐条备份和还原。")])]),t._v(" "),a("h3",{attrs:{id:"_2-4-方案选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-方案选择"}},[t._v("#")]),t._v(" 2.4 方案选择")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/%E6%A8%A1%E5%BC%8F%E9%80%89%E6%8B%A9.png",alt:"模式选择"}})]),t._v(" "),a("ul",[a("li",[t._v("一般情况下，可以考虑采用 COLUMN 模式，开发、运维简单，以最少的服务器为最多的租户提供服务。")]),t._v(" "),a("li",[t._v("租户规模比较大，或者一些租户对安全性要求较高，可以考虑采用 DATASOURCE 模式，当然它也相对复杂的多。")]),t._v(" "),a("li",[t._v("不推荐采用 SCHEMA 模式，因为它的优点并不明显，而且它的缺点也很明显，同时对复杂 SQL 支持一般。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提问：项目支持哪些模式？")]),t._v(" "),a("p",[t._v("目前支持最主流的 DATASOURCE 和 COLUMN 两种模式。而 SCHEMA 模式不推荐使用，所以暂时不考虑实现。")])]),t._v(" "),a("p",[t._v("考虑到让大家更好的理解 DATASOURCE 和 COLUMN 模式，拆成了两篇文章：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/saas-tenant"}},[t._v("《SaaS 多租户【字段隔离】》")]),t._v("：讲解 COLUMN 模式")]),t._v(" "),a("li",[a("a",{attrs:{href:"/saas-tenant/dynamic"}},[t._v("《SaaS 多租户【数据库隔离】》")]),t._v("：讲解 DATASOURCE 模式")])]),t._v(" "),a("h2",{attrs:{id:"_3-多租户的开关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-多租户的开关"}},[t._v("#")]),t._v(" 3. 多租户的开关")]),t._v(" "),a("p",[t._v("系统有两个配置项，设置为 "),a("code",[t._v("true")]),t._v(" 时开启多租户，设置为 "),a("code",[t._v("false")]),t._v(" 时关闭多租户。")]),t._v(" "),a("p",[t._v("注意，两者需要保持一致，否则会报错！")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("配置项")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("配置文件")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("yudao.server.tenant")])]),t._v(" "),a("td",[t._v("后端开关")]),t._v(" "),a("td",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/01.png",alt:"示例"}})])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("VUE_APP_TENANT_ENABLE")])]),t._v(" "),a("td",[t._v("前端开关")]),t._v(" "),a("td",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/02.png",alt:"示例"}})])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("疑问：为什么要设置两个配置项？")]),t._v(" "),a("p",[t._v("前端登录界面需要使用到多租户的配置项，从后端加载配置项的话，体验会比较差。")])]),t._v(" "),a("h2",{attrs:{id:"_4-多租户的业务功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-多租户的业务功能"}},[t._v("#")]),t._v(" 4. 多租户的业务功能")]),t._v(" "),a("p",[t._v("多租户主要有两个业务功能：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("业务功能")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("界面")]),t._v(" "),a("th",[t._v("代码")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("租户管理")]),t._v(" "),a("td",[t._v("配置系统租户，创建对应的租户管理员")]),t._v(" "),a("td",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/03.png",alt:"租户管理"}})]),t._v(" "),a("td",[a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/tenant/TenantServiceImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("后端"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/system/tenant/index.vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端"),a("OutboundLink")],1)])]),t._v(" "),a("tr",[a("td",[t._v("租户套餐")]),t._v(" "),a("td",[t._v("配置租户套餐，自定每个租户的菜单、操作、按钮的权限")]),t._v(" "),a("td",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/04.png",alt:"租户套餐"}})]),t._v(" "),a("td",[a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/tenant/TenantPackageServiceImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("后端"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://github.com/yudaocode/yudao-ui-admin-vue2/blob/master/src/views/system/tenantPackage/index.vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端"),a("OutboundLink")],1)])])])]),t._v(" "),a("p",[a("strong",[t._v("下面，我们来新增一个租户，它使用 COLUMN 模式。")])]),t._v(" "),a("p",[t._v("① 点击 [租户管理] 菜单，点击 [新增] 按钮，填写租户的信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/05.png",alt:"新增租户"}})]),t._v(" "),a("p",[t._v("② 点击 [确认] 按钮，完成租户的创建，它会自动创建对应的租户管理员、角色等信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/06.png",alt:"租户的管理员、角色"}})]),t._v(" "),a("p",[t._v("③ 退出系统，登录刚创建的租户。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/07.png",alt:"登录界面"}})]),t._v(" "),a("p",[t._v("至此，我们已经完成了租户的创建。")]),t._v(" "),a("h2",{attrs:{id:"_5-多租户的技术组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-多租户的技术组件"}},[t._v("#")]),t._v(" 5. 多租户的技术组件")]),t._v(" "),a("p",[t._v("技术组件 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("yudao-spring-boot-starter-biz-tenant")]),a("OutboundLink")],1),t._v("，实现透明化的多租户能力，针对 Web、Security、DB、Redis、AOP、Job、MQ、Async 等多个层面进行封装。")]),t._v(" "),a("h3",{attrs:{id:"_5-1-租户上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-租户上下文"}},[t._v("#")]),t._v(" 5.1 租户上下文")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/context/TenantContextHolder.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("TenantContextHolder"),a("OutboundLink")],1),t._v(" 是租户上下文，通过 ThreadLocal 实现租户编号的共享与传递。")]),t._v(" "),a("p",[t._v("通过调用 TenantContextHolder 的 "),a("code",[t._v("#getTenantId()")]),t._v(" "),a("strong",[t._v("静态")]),t._v("方法，获得当前的租户编号。绝绝绝大多数情况下，并不需要。")]),t._v(" "),a("h3",{attrs:{id:"_5-2-web-层【重要】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-web-层【重要】"}},[t._v("#")]),t._v(" 5.2 Web 层【重要】")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/web",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("web")]),a("OutboundLink")],1),t._v(" 包。")])]),t._v(" "),a("p",[t._v("默认情况下，前端的每个请求 Header "),a("strong",[t._v("必须")]),t._v("带上 "),a("code",[t._v("tenant-id")]),t._v("，值为租户编号，即 "),a("code",[t._v("system_tenant")]),t._v(" 表的主键编号。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/08.png",alt:"请求示例"}})]),t._v(" "),a("p",[t._v("如果不带该请求头，会报“租户的请求未传递，请进行排查”错误提示。")]),t._v(" "),a("p",[t._v("😜 通过 "),a("code",[t._v("yudao.tenant.ignore-urls")]),t._v(" 配置项，可以设置哪些 URL 无需带该请求头。例如说：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/09.png",alt:" 配置项"}})]),t._v(" "),a("h3",{attrs:{id:"_5-3-security-层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-security-层"}},[t._v("#")]),t._v(" 5.3 Security 层")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/security",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("security")]),a("OutboundLink")],1),t._v(" 包。")])]),t._v(" "),a("p",[t._v("主要是校验登录的用户，校验是否有权限访问该租户，避免越权问题。")]),t._v(" "),a("h3",{attrs:{id:"_5-4-db-层【重要】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-db-层【重要】"}},[t._v("#")]),t._v(" 5.4 DB 层【重要】")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/db",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("db")]),a("OutboundLink")],1),t._v(" 包。")])]),t._v(" "),a("p",[t._v("COLUMN 模式，基于 MyBatis Plus 自带的"),a("a",{attrs:{href:"https://baomidou.com/pages/aef2f2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("多租户"),a("OutboundLink")],1),t._v("功能实现。")]),t._v(" "),a("p",[t._v("核心：每次对数据库操作时，它会"),a("strong",[t._v("自动")]),t._v("拼接 "),a("code",[t._v("WHERE tenant_id = ?")]),t._v(" 条件来进行租户的过滤，并且基本支持所有的 SQL 场景。")]),t._v(" "),a("p",[t._v("如下是具体方式：")]),t._v(" "),a("p",[t._v("① "),a("strong",[t._v("需要")]),t._v("开启多租户的表，必须添加 "),a("code",[t._v("tenant_id")]),t._v(" 字段。例如说 "),a("code",[t._v("system_users")]),t._v("、"),a("code",[t._v("system_role")]),t._v(" 等表。")]),t._v(" "),a("div",{staticClass:"language-SQL extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("system_role"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'角色ID'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARACTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'角色名称'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("tenant_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'租户编号'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BTREE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'角色信息表'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("并且该表对应的 DO 需要使用到 "),a("code",[t._v("tenantId")]),t._v(" 属性时，建议继承 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/db/TenantBaseDO.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("TenantBaseDO"),a("OutboundLink")],1),t._v(" 类。")]),t._v(" "),a("p",[t._v("② "),a("strong",[t._v("无需")]),t._v("开启多租户的表，需要添加表名到 "),a("code",[t._v("yudao.tenant.ignore-tables")]),t._v(" 配置项目。例如说：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/10.png",alt:" 配置项"}})]),t._v(" "),a("p",[t._v("如果不配置的话，MyBatis Plus 会自动拼接 "),a("code",[t._v("WHERE tenant_id = ?")]),t._v(" 条件，导致报 "),a("code",[t._v("tenant_id")]),t._v(" 字段不存在的错误。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("友情提示：MyBatis Plus 的多租户方案，在我们在 MyBatis XML 手写 SQL 时，是不生效的，即不会拼接 `tenant_id` 字段！！！")]),t._v(" "),a("p",[t._v("解决方案：需要手动自己拼接，可见 "),a("code",[t._v("ErpPurchaseStatisticsMapper.xml")]),t._v(" 案例，如下所示：")]),t._v(" "),a("div",{staticClass:"language-SQL extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("tenant_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ${"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@cn.iocoder.yudao.framework.tenant.core.context.TenantContextHolder")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@getRequiredTenantId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("}\n")])])]),a("ul",[a("li",[t._v("其中，后面 "),a("code",[t._v("${@...}")]),t._v(" 一串，是 MyBatis 调用静态方法的方式，即使用 TenantContextHolder 的 "),a("code",[t._v("#getRequiredTenantId()")]),t._v(" 方法，获得当前的租户编号。")])]),t._v(" "),a("p",[t._v("补充说明：后续和球友沟通下来，部分简单 SQL 情况下，MyBatis Plus 还是会拼接。可见 "),a("a",{attrs:{href:"https://t.zsxq.com/O8ys4",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://t.zsxq.com/O8ys4"),a("OutboundLink")],1),t._v(" 帖子，欢迎讨论！")])]),t._v(" "),a("h3",{attrs:{id:"_5-5-redis-层【重要】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-redis-层【重要】"}},[t._v("#")]),t._v(" 5.5 Redis 层【重要】")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/redis",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("redis")]),a("OutboundLink")],1),t._v(" 包。")])]),t._v(" "),a("p",[t._v("由于 Redis 不同于 DB 有 "),a("code",[t._v("tenant_id")]),t._v(" 字段，无法通过类似 "),a("code",[t._v("WHERE tenant_id")]),t._v(" = ? 的方式过滤，所以需要通过在 Redis Key 上增加 "),a("code",[t._v(":t{tenantId}")]),t._v(" 后缀的方式，进行租户之间的隔离。")]),t._v(" "),a("p",[t._v("例如说，假设 Redis Key 是 "),a("code",[t._v("user:%d")]),t._v("，示例是 "),a("code",[t._v("user:1024")]),t._v("；对应到多租户 1 的 Redis Key 是 "),a("code",[t._v("user:t1:1024")]),t._v("。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("为什么 Redis Key 要多租户隔离呢？")]),t._v(" "),a("ul",[a("li",[t._v("① 在使用 DATASOURCE 模式时，不同库的相同表的 id 可能相同，例如说 A 库的用户，和 B 库的用户都是 1024，直接缓存会存在 Redis Key 的冲突。")]),t._v(" "),a("li",[t._v("② 在所有模式下，跨租户可能存在相同的需要唯一的数据，例如说用户的手机号，直接缓存会存在 Redis Key 的冲突。")])])]),t._v(" "),a("h4",{attrs:{id:"使用方式一-基于-spring-cache-redis【推荐】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用方式一-基于-spring-cache-redis【推荐】"}},[t._v("#")]),t._v(" 使用方式一：基于 Spring Cache + Redis【推荐】")]),t._v(" "),a("p",[t._v("只需要一步，在方法上添加 Spring Cache 注解，例如说 "),a("code",[t._v("@Cachable")]),t._v("、"),a("code",[t._v("@CachePut")]),t._v("、"),a("code",[t._v("@CacheEvict")]),t._v("。")]),t._v(" "),a("p",[t._v("具体的实现原理，可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/redis/TenantRedisCacheManager.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("TenantRedisCacheManager"),a("OutboundLink")],1),t._v(" 的源码。")]),t._v(" "),a("p",[t._v("注意！！！默认配置下，Spring Cache 都开启 Redis Key 的多租户隔离。如果不需要，可以将 Key 添加到 "),a("code",[t._v("yudao.tenant.ignore-caches")]),t._v(" 配置项中。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/%E5%BF%BD%E7%95%A5%E5%A4%9A%E7%A7%9F%E6%88%B7RedisKey.png",alt:" 配置项"}})]),t._v(" "),a("h4",{attrs:{id:"使用方式二-基于-redistemplate-tenantrediskeydefine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用方式二-基于-redistemplate-tenantrediskeydefine"}},[t._v("#")]),t._v(" 使用方式二：基于 RedisTemplate + TenantRedisKeyDefine")]),t._v(" "),a("p",[t._v("暂时没有合适的封装，需要在自己 format Redis Key 的时候，手动将 "),a("code",[t._v(":t{tenantId}")]),t._v(" 后缀拼接上。")]),t._v(" "),a("p",[t._v("这也是为什么，我推荐你使用 Spring Cache + Redis 的原因！")]),t._v(" "),a("h3",{attrs:{id:"_5-6-aop【重要】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-aop【重要】"}},[t._v("#")]),t._v(" 5.6 AOP【重要】")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/aop",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("aop")]),a("OutboundLink")],1),t._v(" 包。")])]),t._v(" "),a("p",[t._v("① 声明 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/aop/TenantIgnore.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@TenantIgnore")]),a("OutboundLink")],1),t._v(" 注解在方法上，标记指定方法不进行租户的自动过滤，避免"),a("strong",[t._v("自动")]),t._v("拼接 "),a("code",[t._v("WHERE tenant_id = ?")]),t._v(" 条件等等。")]),t._v(" "),a("p",[t._v("例如说："),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/permission/RoleServiceImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("RoleServiceImpl"),a("OutboundLink")],1),t._v(" 的 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/permission/RoleServiceImpl.java#L83-L100",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("#initLocalCache()")]),a("OutboundLink")],1),t._v(" 方法，加载"),a("strong",[t._v("所有")]),t._v("租户的角色到内存进行缓存，如果不声明 "),a("code",[t._v("@TenantIgnore")]),t._v(" 注解，会导致租户的自动过滤，只加载了某个租户的角色。")]),t._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RoleServiceImpl.java")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RoleServiceImpl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RoleService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Resource")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Lazy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注入自己，所以延迟加载")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RoleService")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PostConstruct")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@TenantIgnore")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略自动多租户，全局初始化缓存")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initLocalCache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 从数据库中，加载角色")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Scheduled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fixedDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SCHEDULER_PERIOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initialDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SCHEDULER_PERIOD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("schedulePeriodicRefresh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initLocalCache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <x> 通过 self 引用到 Spring 代理对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("有一点要格外注意，由于 "),a("code",[t._v("@TenantIgnore")]),t._v(" 注解是基于 Spring AOP 实现，如果是"),a("strong",[t._v("方法内部的调用")]),t._v("，避免使用 "),a("code",[t._v("this")]),t._v(" 导致不生效，可以采用上述示例的 "),a("code",[t._v("<x>")]),t._v(" 处的 "),a("code",[t._v("self")]),t._v(" 方式。")]),t._v(" "),a("p",[t._v("② 使用 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/util/TenantUtils.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("TenantUtils"),a("OutboundLink")],1),t._v(" 的 "),a("code",[t._v("#execute(Long tenantId, Runnable runnable)")]),t._v(" 方法，模拟指定租户( "),a("code",[t._v("tenantId")]),t._v(" )，执行某段业务逻辑( "),a("code",[t._v("runnable")]),t._v(" )。")]),t._v(" "),a("p",[t._v("例如说：在 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-module-system/yudao-module-system-biz/src/main/java/cn/iocoder/yudao/module/system/service/tenant/TenantServiceImpl.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("TenantServiceImpl"),a("OutboundLink")],1),t._v(" 的 "),a("code",[t._v("#createTenant(...)")]),t._v(" 方法，在创建完租户时，需要模拟该租户，进行用户和角色的创建。如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/Saas%E5%A4%9A%E7%A7%9F%E6%88%B7/11.png",alt:"TenantUtils 模拟租户"}})]),t._v(" "),a("h3",{attrs:{id:"_5-7-job【重要】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-job【重要】"}},[t._v("#")]),t._v(" 5.7 Job【重要】")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/job",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("job")]),a("OutboundLink")],1),t._v(" 包。")])]),t._v(" "),a("p",[t._v("声明 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/job/TenantJob.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@TenantJob")]),a("OutboundLink")],1),t._v(" 注解在 Job 方法上，实现"),a("strong",[t._v("并行")]),t._v("遍历每个租户，执行定时任务的逻辑。")]),t._v(" "),a("h3",{attrs:{id:"_5-8-mq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-mq"}},[t._v("#")]),t._v(" 5.8 MQ")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/tree/master/yudao-framework/yudao-spring-boot-starter-biz-tenant/src/main/java/cn/iocoder/yudao/framework/tenant/core/mq",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mq")]),a("OutboundLink")],1),t._v(" 包。")])]),t._v(" "),a("p",[t._v("通过租户对 MQ 层面的封装，实现租户上下文，可以继续传递到 MQ 消费的逻辑中，避免丢失的问题。实现原理是：")]),t._v(" "),a("ul",[a("li",[t._v("发送消息时，MQ 会将租户上下文的租户编号，记录到 Message 消息头 "),a("code",[t._v("tenant-id")]),t._v(" 上。")]),t._v(" "),a("li",[t._v("消费消息时，MQ 会将 Message 消息头 "),a("code",[t._v("tenant-id")]),t._v("，设置到租户上下文的租户编号。")])]),t._v(" "),a("h3",{attrs:{id:"_5-9-async"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-async"}},[t._v("#")]),t._v(" 5.9 Async")]),t._v(" "),a("blockquote",[a("p",[t._v("实现可见 "),a("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-job/src/main/java/cn/iocoder/yudao/framework/quartz/config/YudaoAsyncAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("YudaoAsyncAutoConfiguration")]),a("OutboundLink")],1),t._v(" 类。")])]),t._v(" "),a("p",[t._v("通过使用阿里开源的 "),a("a",{attrs:{href:"https://github.com/alibaba/transmittable-thread-local",target:"_blank",rel:"noopener noreferrer"}},[t._v("TransmittableThreadLocal"),a("OutboundLink")],1),t._v(" 组件，实现 Spring Async 执行异步逻辑时，租户上下文可以继续传递，避免丢失的问题。")]),t._v(" "),a("h2",{attrs:{id:"_6-租户独立域名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-租户独立域名"}},[t._v("#")]),t._v(" 6. 租户独立域名")]),t._v(" "),a("p",[t._v("在我们使用 SaaS 云产品的时候，每个租户会拥有 "),a("strong",[t._v("独立的子域名")]),t._v("，例如说：租户 A 对应 "),a("code",[t._v("a.iocoder.cn")]),t._v("，租户 B 对应 "),a("code",[t._v("b.iocoder.cn")]),t._v("。")]),t._v(" "),a("p",[t._v("目前管理后台已经提供类似的能力，更多大家可以基于它去拓展。实现方式：")]),t._v(" "),a("ol",[a("li",[t._v("在 "),a("code",[t._v("system_tenant")]),t._v(" 表里，有个 "),a("code",[t._v("website")]),t._v(" 字段为该租户的独立域名，你可以填写你希望分配给它的子域名。")]),t._v(" "),a("li",[t._v("在 Nginx 上做 "),a("strong",[t._v("泛域名解析")]),t._v(" 到你的前端项目，例如说 Nginx 的 "),a("code",[t._v("server_name")]),t._v(" "),a("code",[t._v("*.iocoder.cn")]),t._v(" 解析到 Vue3 管理后台。")])]),t._v(" "),a("p",[t._v("这样用户在访问管理后台的登录界面，会自动根据当前访问域名的 "),a("code",[t._v("host")]),t._v("，向后端获得对应的 "),a("code",[t._v("tenant-id")]),t._v(" 编号，后续请求都带上它！")]),t._v(" "),a("p",[t._v("ps：商城 uniapp 暂时还没做，感兴趣可以 pull request 贡献下噢！")])])}),[],!1,null,null,null);a.default=s.exports}}]);