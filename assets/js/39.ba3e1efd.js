(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{368:function(t,e,a){"use strict";a.r(e);var r=a(7),_=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("本小节，我们来讲解 VO 的对象转换、数据翻译的功能。注意，这里的 VO 是泛指 Java POJO 对象，也可以是 DTO、BO 等等。")]),t._v(" "),e("h2",{attrs:{id:"_1-对象转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象转换"}},[t._v("#")]),t._v(" 1. 对象转换")]),t._v(" "),e("p",[t._v("对象转换，指的是 A 类型对象，转换成 B 类型对象。例如说，我们有一个 UserDO 类型对象，需要转换成 UserVO 或者 UserDTO 类型对象。")]),t._v(" "),e("p",[t._v("市面上有很多的对象转换工具，例如说 MapStruct、Dozer、各种 BeanUtils、BeanCopier 等等。目前我们提供了 MapStruct、BeanUtils 两种解决方案。")]),t._v(" "),e("p",[t._v("相比来说，MapStruct 性能会略好于 BeanUtils，但是相比数据库操作带来的耗时来说，基本可以忽略不计。因此，一般情况下，建议使用 BeanUtils 即可。")]),t._v(" "),e("h3",{attrs:{id:"_1-1-mapstruct"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-mapstruct"}},[t._v("#")]),t._v(" 1.1 MapStruct")]),t._v(" "),e("p",[t._v("项目使用 "),e("a",{attrs:{href:"https://www.iocoder.cn/Spring-Boot/MapStruct/?yudao",target:"_blank",rel:"noopener noreferrer"}},[t._v("MapStruct"),e("OutboundLink")],1),t._v(" 实现 VO、DO、DTO 等对象之间的转换。")]),t._v(" "),e("p",[t._v("如果你没有学习过 MapStruct，需要阅读下 "),e("a",{attrs:{href:"https://www.iocoder.cn/Spring-Boot/MapStruct/?yudao",target:"_blank",rel:"noopener noreferrer"}},[t._v("《芋道 Spring Boot 对象转换 MapStruct 入门》"),e("OutboundLink")],1),t._v(" 文章。")]),t._v(" "),e("p",[t._v("在每个 "),e("code",[t._v("yudao-module-xxx-biz")]),t._v(" 模块的 "),e("code",[t._v("convert")]),t._v(" 包下，可以看到各个业务的 Convert 接口，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/MapStruct.png",alt:"MapStruct 示例"}})]),t._v(" "),e("h3",{attrs:{id:"_1-2-beanutils"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-beanutils"}},[t._v("#")]),t._v(" 1.2 BeanUtils")]),t._v(" "),e("p",[t._v("项目提供了 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-common/src/main/java/cn/iocoder/yudao/framework/common/util/object/BeanUtils.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("BeanUtils"),e("OutboundLink")],1),t._v(" 类，它是基于 Hutool 的 BeanUtil 封装一层。如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/BeanUtils.png",alt:"BeanUtils"}})]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("疑问：为什么不直接使用 Hutool BeanUtil，而是额外封装一层呢？")]),t._v(" "),e("p",[t._v("① 方便替换实现。例如说，你想把 Hutool BeanUtil 换成 Spring BeanUtil、BeanCopier 等时，只需要修改它。")]),t._v(" "),e("p",[t._v("② 特性增强。额外支持 List、Page 对象的转换，也支持 Consumer 进一步转化。")])]),t._v(" "),e("p",[t._v("1、在简单场景，直接使用 BeanUtils 的 "),e("code",[t._v("#toBean(...)")]),t._v(" 方法，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/BeanUtils-01.png",alt:"简单场景"}})]),t._v(" "),e("p",[t._v("2、在复杂场景，可以通过 Consumer 进一步拼接，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/BeanUtils-02.png",alt:"复杂场景"}})]),t._v(" "),e("p",[t._v("当然，如果 Consumer 的逻辑比较复杂，又希望 Controller 代码精简一点，可以放到对应的 Convert 类里，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/BeanUtils-03.png",alt:"更复杂场景"}})]),t._v(" "),e("h2",{attrs:{id:"_2-数据翻译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据翻译"}},[t._v("#")]),t._v(" 2. 数据翻译")]),t._v(" "),e("p",[t._v("数据翻译，指的是将 A 类型对象的某个字段，“翻译”成 B 类型对象的某个字段。例如说，我们有一个 UserVO 的 "),e("code",[t._v("deptId")]),t._v(" 字段，读取对应 DeptDO  的 "),e("code",[t._v("name")]),t._v(" 字段，最终设置到 UserVO 的 "),e("code",[t._v("deptName")]),t._v(" 字段。")]),t._v(" "),e("p",[t._v("一般来说，目前有两种方案：")]),t._v(" "),e("ul",[e("li",[t._v("方案一：数据库 SQL 联表查询，可见 "),e("RouterLink",{attrs:{to:"/mybatis-pro/"}},[t._v("《MyBatis 联表&分页查询》")]),t._v(" 文档")],1),t._v(" "),e("li",[t._v("方案二：数据库多次单表查询，然后在 Java 代码中进行数据拼接（翻译）。其实就是「1.2 BeanUtils」的“复杂场景”。如下图所示：")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/BeanUtils-02.png",alt:"复杂场景"}})]),t._v(" "),e("p",[t._v("项目里，大多数采用“方案二”，因为这样可以减少数据库的压力，避免 SQL 过于复杂，也方便后续维护。")]),t._v(" "),e("p",[t._v("不过如果你觉得“方案二”比较麻烦，我们也集成了 "),e("a",{attrs:{href:"https://gitee.com/dromara/easy_trans",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("easy-trans")]),e("OutboundLink")],1),t._v(" 框架，一个注解，搞定数据翻译。")]),t._v(" "),e("p",[t._v("下面，我们来分场景，看看具体如何使用！")]),t._v(" "),e("h3",{attrs:{id:"_2-1-场景一-模块内翻译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-场景一-模块内翻译"}},[t._v("#")]),t._v(" 2.1 场景一：模块内翻译")]),t._v(" "),e("p",[t._v("模块内翻译，指的是在同一个模块内，进行数据翻译。例如说，OperateLogRespVO 属于 "),e("code",[t._v("yudao-module-system")]),t._v(" 模块，需要读取模块内的 AdminUserDO 数据。")]),t._v(" "),e("p",[t._v("① 第一步，给 OperateLogRespVO 实现 "),e("code",[t._v("com.fhs.core.trans.vo.VO")]),t._v(" 接口。")]),t._v(" "),e("p",[t._v("② 第二步，给 OperateLogRespVO 的 "),e("code",[t._v("deptId")]),t._v(" 字段，添加 "),e("code",[t._v("@Trans")]),t._v(" 注解，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/%E6%A8%A1%E5%9D%97%E5%86%85%E7%BF%BB%E8%AF%91.png",alt:"模块内翻译"}})]),t._v(" "),e("ul",[e("li",[e("code",[t._v("type")]),t._v(" 属性：使用 "),e("code",[t._v("TransType.SIMPLE")]),t._v(" 简单翻译，使用 MyBatis Plus")]),t._v(" "),e("li",[e("code",[t._v("target")]),t._v(" 属性：目标 DO 实体的类，例如说 "),e("code",[t._v("AdminUserDO.class")])]),t._v(" "),e("li",[e("code",[t._v("fields")]),t._v(" 属性：读取 DO 实体的字段，例如说 "),e("code",[t._v("nickname")]),t._v("。如果是多个字段，它也是个数组")]),t._v(" "),e("li",[e("code",[t._v("ref")]),t._v(" 属性：设置 VO 类的字段，例如说 "),e("code",[t._v("userNickname")]),t._v("。如果是多个字段，可以使用 "),e("code",[t._v("refs")])])]),t._v(" "),e("p",[t._v("更多关于 "),e("code",[t._v("@Trans")]),t._v(" 注解的讲解，可见 "),e("a",{attrs:{href:"https://easy-trans.dromara.org/components/trans.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Trans 注解详解(必读)》"),e("OutboundLink")],1),t._v(" 文档。")]),t._v(" "),e("h3",{attrs:{id:"_2-2-场景二-跨模块翻译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-场景二-跨模块翻译"}},[t._v("#")]),t._v(" 2.2 场景二：跨模块翻译")]),t._v(" "),e("p",[t._v("跨模块翻译，指的是在不同模块，进行数据翻译。例如说，CrmProductRespVO 属于 "),e("code",[t._v("yudao-module-crm")]),t._v(" 模块，需要读取 "),e("code",[t._v("yudao-module-system")]),t._v(" 模块的 AdminUserDO 数据。")]),t._v(" "),e("p",[t._v("① 第一步，给 CrmProductRespVO 实现 "),e("code",[t._v("com.fhs.core.trans.vo.VO")]),t._v(" 接口。")]),t._v(" "),e("p",[t._v("② 第二步，给 CrmProductRespVO 的 "),e("code",[t._v("ownerUserId")]),t._v(" 字段，添加 "),e("code",[t._v("@Trans")]),t._v(" 注解，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/%E8%B7%A8%E6%A8%A1%E5%9D%97%E7%BF%BB%E8%AF%91.png",alt:"跨模块翻译"}})]),t._v(" "),e("ul",[e("li",[e("code",[t._v("type")]),t._v(" 属性：使用 "),e("code",[t._v("TransType.SIMPLE")]),t._v(" 跨模块翻译。不过实际上，因为多模块是在单个 Java 进程中，所以它底层还是走的 MyBatis Plus")]),t._v(" "),e("li",[e("code",[t._v("targetClassName")]),t._v(" 属性：目标 DO 实体的类全路径，例如说 "),e("code",[t._v("cn.iocoder.yudao.module.system.dal.dataobject.user.AdminUserDO")])]),t._v(" "),e("li",[e("code",[t._v("fields")]),t._v(" 和 "),e("code",[t._v("ref")]),t._v(" 属性：同上，不重复解释")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("友情提示：")]),t._v(" "),e("p",[t._v("后续这个场景下，"),e("code",[t._v("easy-trans")]),t._v(" 的作者，也会改成 "),e("code",[t._v("TransType.SIMPLE")]),t._v(" 简单翻译。")]),t._v(" "),e("p",[t._v("因此，“跨模块翻译”使用 "),e("code",[t._v("targetClassName")]),t._v(" 属性的原因，是因为拿不到跨模块的 DO  实体类 = =")])]),t._v(" "),e("h3",{attrs:{id:"_2-3-场景三-excel-导出翻译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-场景三-excel-导出翻译"}},[t._v("#")]),t._v(" 2.3 场景三：Excel 导出翻译")]),t._v(" "),e("p",[t._v("在 Excel 导出时，如果也有数据翻译的需求，需要调用 "),e("a",{attrs:{href:"https://github.com/YunaiV/ruoyi-vue-pro/blob/master/yudao-framework/yudao-spring-boot-starter-mybatis/src/main/java/cn/iocoder/yudao/framework/translate/core/TranslateUtils.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("TranslateUtils"),e("OutboundLink")],1),t._v(" 的 "),e("code",[t._v("#translate(...)")]),t._v(" 方法，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/%E5%AF%BC%E5%87%BA%E7%BF%BB%E8%AF%91.png",alt:"Excel 导出翻译"}})]),t._v(" "),e("p",[t._v("本质上，它就是 "),e("code",[t._v("easy-trans")]),t._v(" 的手动翻译，可见 "),e("a",{attrs:{href:"https://easy-trans.dromara.org/components/basic.html#_3%E3%80%81%E8%87%AA%E5%8A%A8%E7%BF%BB%E8%AF%91%E5%92%8C%E6%89%8B%E5%8A%A8%E7%BF%BB%E8%AF%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Trans 基础使用(必读)》的“3、自动翻译和手动翻译”"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"_2-4-自动翻译的说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-自动翻译的说明"}},[t._v("#")]),t._v(" 2.4 自动翻译的说明")]),t._v(" "),e("p",[t._v("① 默认情况下，所有 Spring MVC 接口的 RespVO 实现了 "),e("code",[t._v("com.fhs.core.trans.vo.VO")]),t._v(" 接口，因为项目配置了 "),e("code",[t._v("easy-trans.is-enable-global")]),t._v(" 为 "),e("code",[t._v("true")]),t._v(" 启动全局翻译。")]),t._v(" "),e("p",[t._v("如果你希望某个接口不自动翻译，可以在方法上添加 "),e("code",[t._v("@IgnoreTrans")]),t._v(" 注解。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("友情提示：")]),t._v(" "),e("p",[t._v("如果一个 Spring MVC 接口的返回数据比较多，或者 RespVO 是个树形结构，建议添加 "),e("code",[t._v("@IgnoreTrans")]),t._v(" 注解。\n原因是，"),e("code",[t._v("easy-trans")]),t._v(" 全局有递归推断，在数据规模较大的情况下，可能会导致性能问题。")])]),t._v(" "),e("p",[t._v("② 如果希望一个普通方法，也自动翻译，可以在方法上添加 "),e("code",[t._v("@TransMethodResult")]),t._v(" 注解，框架会自动翻译方法 "),e("code",[t._v("return")]),t._v(" 的值基于 Spring AOP 实现。例如说：")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%90%8E%E7%AB%AF%E6%89%8B%E5%86%8C/VO/TransMethodResult.png",alt:"@TransMethodResult"}})])])}),[],!1,null,null,null);e.default=_.exports}}]);